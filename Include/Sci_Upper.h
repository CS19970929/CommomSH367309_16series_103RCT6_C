#ifndef SCI_H
#define SCI_H

#define	RS485_BROADCAST_ADDR		(( UINT8 ) 0x00 )
#define	RS485_SLAVE_ADDR			(( UINT8 ) 0x01 )

#define	SCI_TX_BUF_LEN			251   	//日志记录导致提升为250
#define RS485_MAX_BUFFER_SIZE 	251		//

//485 cmd type
enum RS485_CMD_E {
	RS485_CMD_READ_REGS = 3,
	RS485_CMD_WRITE_REG = 6,
	RS485_CMD_WRITE_REGS = 16,
	
	//UART_CLIENT_CMD_0x01 = 0xA1,	//客户的
	//UART_CLIENT_CMD_0x02 = 0xA2,	
};


struct SOC_CAL_ELEMENT_UPPER {
	UINT16 u16Soc;                 	//当前电池SOC     0―100 为相对容量百分比
	UINT16 u16Soh;                 	//为绝对容量百分比0――100
	UINT16 u16CapacityNow;        	//当前容量	Ah*100
	UINT16 u16CapacityFull;        	//当前满电容量	Ah*100		//为什么*100为单位呢，因为上位机是mAh，所以能提高显示精度
	UINT16 u16CapacityFactory;     	//出厂满电容量	Ah*100		//带来的结果是650Ah最大
	UINT16 u16Cycle_times;     		//循环次数
};


struct MDLCHGFAULT_BITS     {    	// bits  description
	UINT8 b1CellOvp			:1;   	//
	UINT8 b1CellUvp			:1;   	//
	UINT8 b1BatOvp			:1;   	//
	UINT8 b1BatUvp			:1;   	//
	
	UINT8 b1IchgOcp			:1;   	//
	UINT8 b1IdischgOcp		:1;   	//
	UINT8 b1CellChgOtp		:1;   	//
	UINT8 b1CellDischgOtp 	:1;   	//

	UINT8 b1CellChgUtp		:1;   	//
	UINT8 b1CellDischgUtp 	:1;   	//
	UINT8 b1VcellDeltaBig	:1;   	//
	UINT8 b1TempDeltaBig 	:1;   	//这个没有，Res可用

	UINT8 b1SocLow			:1;   	//
	UINT8 b1TmosOtp			:1;   	//
	UINT8 b1Rcved1	 		:1;   	//
	UINT8 b1Rcved2  		:1;   	//
};


union  MDLCHGFAULT_REG
{
	UINT16   all;
	struct MDLCHGFAULT_BITS	bits;
};


struct stCell_Info {
	UINT16	u16VCell[32];
	UINT16	u16VCellMax;                    // mv
	UINT16	u16VCellMin;                    // mv
    UINT16	u16VCellMaxPosition;
    UINT16	u16VCellMinPosition;
	UINT16	u16VCellDelta;                  // mv
	UINT16	u16VCellTotle;                  // v *100
    UINT16	u16Temperature[TEMP_NUM];       // +40°C *10
    UINT16	u16TempMax;                     // +40°C *10
	UINT16	u16TempMin;                     // +40°C *10
	UINT16	u16Ichg;                        // A *10
    UINT16	u16IDischg;                     // A *10
    //UINT16	u16Soc;							// %
    struct SOC_CAL_ELEMENT_UPPER SocElement;
    union MDLCHGFAULT_REG unMdlFault_First;
    union MDLCHGFAULT_REG unMdlFault_Second;
	union MDLCHGFAULT_REG unMdlFault_Third;
	UINT16	u16BalanceFlag1;                 //电池均衡标志位1
	UINT16	u16BalanceFlag2;                 //电池均衡标志位2
};

//RS485状态机状态
#define	RS485_STA_IDLE				0
#define	RS485_STA_RX_COMPLETE		1
#define	RS485_STA_RX_OK				2
#define	RS485_STA_TX_COMPLETE		3


#define	RS485_ACK_POS			        0x00	// 正响应
#define	RS485_ACK_NEG			        0x01	// 负响应
//Error type
#define	RS485_ERROR_ADDR_INVALID	    0x01	// 地址不合法
#define	RS485_ERROR_CRC_ERROR			0x02	// CRC校验错误
#define	RS485_ERROR_DATA_INVALID	    0x03	// 参数不合法
#define	RS485_ERROR_CMD_INVALID			0x04	// 当前状态下命令无效
#define	RS485_ERROR_RONLY_NO_W			0x05	// 只读参数拒绝写入
#define	RS485_ERROR_WONLY_NO_R			0x06	// 只写参数拒绝读取
#define	RS485_ERROR_NO_PERMISSION		0x07	// 无权限
#define	RS485_ERROR_NULL			    0x08	// 未知错误


// SCI_485 Message Structure
struct RS485MSG {
	UINT8	ptr_no;          	// Word stating what state msg is in
	UINT8	csr;          		// I2C address of slave msg is intended for
	UINT16	u16RdRegStartAddr;	// read reg start addr
	UINT16	u16RdRegStartAddrActure;	//自定义地址保存
	UINT8	u16RdRegByteNum;    // read byte lenth
	UINT8	AckLenth;			// ack byte lenth
	UINT8	AckType;			// ack type
	UINT8	ErrorType;			// error type
	UINT8 	u16Buffer[RS485_MAX_BUFFER_SIZE];    // Array holding msg data - max that
	enum RS485_CMD_E enRs485CmdType;
};


//可读可写，进enum大单
//#define RS485_ADDR_RW_ORDER		0x1000
#define RS485_ADDR_RW_CALIB				0x2000
#define RS485_ADDR_RW_PORTECT			0x2100
#define RS485_ADDR_RW_OTHER				0x2200
#define RS485_ADDR_RW_OTHER_CANADD		0x2300


//自己给自己埋的坑，变成了不是标准MODBUS协议了
#if 0
//循环只读，要求1s内上传完毕
#define RS485_ADDR_RO_START0			0xD000
#define RS485_ADDR_RO_START1			0xD001
#define RS485_ADDR_RO_START2			0xD002
#define RS485_ADDR_RO_START3			0xD003
#define RS485_ADDR_RO_START4			0xD004
#endif

//0xD000主要是g_stCellInfoReport的东西，目前共63个字
#define RS485_ADDR_RO_START0			(UINT16)0xD000

//0xD100是从RTC开始到结尾几个保留位，共21+12=33个字
#define RS485_ADDR_RO_START1			(UINT16)0xD100

//0xD100是一个保留位，目前只有一个
#define RS485_ADDR_RO_START2			(UINT16)0xD200



//以下是只读一次，无
#define RS485_ADDR_RO_LCD       		0xC000
#define RS485_ADDR_RO_FA_RTC    		0xC001
#define RS485_ADDR_SN_READ				0xC002
//#define RS485_ADDR_SeriesMode			0xC003_0xC007
#define RS485_ADDR_EVENT_RECORD			0xC008

#define RS485_ADDR_SN_SERIAL_NUM		0xFFF0
#define RS485_ADDR_SN_HAEDWARE_VER		0xFFF1
#define RS485_ADDR_SN_SOFTWARE_VER		0xFFF2


#define RS485_CMD_ADDR_FLASH_CONNECT	0xFFFD		//MCU在线升级连接命令


enum RS485_CMD_RW_E {
	RS485_CMD_ADDR_RESET_CALIB_COEF = 0x1000,
	RS485_CMD_ADDR_RESET_PROTECT_RECORD,
	RS485_CMD_ADDR_RESET_PROTECT_ELEMENT,
	RS485_CMD_ADDR_RESET_OTHER_CANADD,
	RS485_CMD_ADDR_RESET_HEAT_COOL,
	RS485_CMD_ADDR_SET_ONCE_SOC,
	RS485_CMD_ADDR_RESET_AFE_PARAMETERS,
	RS485_CMD_ADDR_RESET_EVENT_RECORD,

	#if 0	//妈的，不是连续研发，中断再开始很容易做无用功，而且系统和实现没那么巧妙完整。
	RS485_CMD_ADDR_SYSFUNC_ONOFF_BALANCE = 0x1100,
	RS485_CMD_ADDR_SYSFUNC_ONOFF_BMS_SOURCE,
	RS485_CMD_ADDR_SYSFUNC_ONOFF_MOS,
	RS485_CMD_ADDR_SYSFUNC_ONOFF_RELAY,
	RS485_CMD_ADDR_SYSFUNC_ONOFF_SOC_FIXED,
	RS485_CMD_ADDR_SYSFUNC_ONOFF_HEAT,
	RS485_CMD_ADDR_SYSFUNC_ONOFF_COOL,
	RS485_CMD_ADDR_SYSFUNC_ONOFF_AFE1,
	RS485_CMD_ADDR_SYSFUNC_ONOFF_AFE2,
	RS485_CMD_ADDR_SYSFUNC_ONOFF_SLEEP,
	#endif
	
	RS485_CMD_ADDR_SWITCH_ON = 0x1100,		//巧妙！
	RS485_CMD_ADDR_SWITCH_OFF,
	RS485_CMD_ADDR_SYSTEM_FUNCTION_ON,
	RS485_CMD_ADDR_SYSTEM_FUNCTION_OFF,


	RS485_CMD_ADDR_VC1CALIB_K = 0x2000,		//读取
	RS485_CMD_ADDR_VC1CALIB_B,
	RS485_CMD_ADDR_VC2CALIB_K,
	RS485_CMD_ADDR_VC2CALIB_B,
	RS485_CMD_ADDR_VC3CALIB_K,
	RS485_CMD_ADDR_VC3CALIB_B,
	RS485_CMD_ADDR_VC4CALIB_K,
	RS485_CMD_ADDR_VC4CALIB_B,
	RS485_CMD_ADDR_VC5CALIB_K,
	RS485_CMD_ADDR_VC5CALIB_B,
	RS485_CMD_ADDR_VC6CALIB_K,
	RS485_CMD_ADDR_VC6CALIB_B,
	RS485_CMD_ADDR_VC7CALIB_K,
	RS485_CMD_ADDR_VC7CALIB_B,
	RS485_CMD_ADDR_VC8CALIB_K,
	RS485_CMD_ADDR_VC8CALIB_B,
	RS485_CMD_ADDR_VC9CALIB_K,
	RS485_CMD_ADDR_VC9CALIB_B,
	RS485_CMD_ADDR_VC10CALIB_K,
	RS485_CMD_ADDR_VC10CALIB_B,
	RS485_CMD_ADDR_VC11CALIB_K,
	RS485_CMD_ADDR_VC11CALIB_B,
	RS485_CMD_ADDR_VC12CALIB_K,
	RS485_CMD_ADDR_VC12CALIB_B,
	RS485_CMD_ADDR_VC13CALIB_K,
	RS485_CMD_ADDR_VC13CALIB_B,
	RS485_CMD_ADDR_VC14CALIB_K,
	RS485_CMD_ADDR_VC14CALIB_B,
	RS485_CMD_ADDR_VC15CALIB_K,
	RS485_CMD_ADDR_VC15CALIB_B,
	RS485_CMD_ADDR_VC16CALIB_K,
	RS485_CMD_ADDR_VC16CALIB_B,
	RS485_CMD_ADDR_VC17CALIB_K,
	RS485_CMD_ADDR_VC17CALIB_B,
	RS485_CMD_ADDR_VC18CALIB_K,
	RS485_CMD_ADDR_VC18CALIB_B,
	RS485_CMD_ADDR_VC19CALIB_K,
	RS485_CMD_ADDR_VC19CALIB_B,
	RS485_CMD_ADDR_VC20CALIB_K,
	RS485_CMD_ADDR_VC20CALIB_B,
	RS485_CMD_ADDR_VC21CALIB_K,
	RS485_CMD_ADDR_VC21CALIB_B,
	RS485_CMD_ADDR_VC22CALIB_K,
	RS485_CMD_ADDR_VC22CALIB_B,
	RS485_CMD_ADDR_VC23CALIB_K,
	RS485_CMD_ADDR_VC23CALIB_B,
	RS485_CMD_ADDR_VC24CALIB_K,
	RS485_CMD_ADDR_VC24CALIB_B,
	RS485_CMD_ADDR_VC25CALIB_K,
	RS485_CMD_ADDR_VC25CALIB_B,
	RS485_CMD_ADDR_VC26CALIB_K,
	RS485_CMD_ADDR_VC26CALIB_B,
	RS485_CMD_ADDR_VC27CALIB_K,
	RS485_CMD_ADDR_VC27CALIB_B,
	RS485_CMD_ADDR_VC28CALIB_K,
	RS485_CMD_ADDR_VC28CALIB_B,
	RS485_CMD_ADDR_VC29CALIB_K,
	RS485_CMD_ADDR_VC29CALIB_B,
	RS485_CMD_ADDR_VC30CALIB_K,
	RS485_CMD_ADDR_VC30CALIB_B,
	RS485_CMD_ADDR_VC31CALIB_K,
	RS485_CMD_ADDR_VC31CALIB_B,
	RS485_CMD_ADDR_VC32CALIB_K,
	RS485_CMD_ADDR_VC32CALIB_B,
	RS485_CMD_ADDR_AFE1CALIB_K,			//读取
	RS485_CMD_ADDR_AFE1CALIB_B,
	RS485_CMD_ADDR_AFE2CALIB_K,
	RS485_CMD_ADDR_AFE2CALIB_B,
	RS485_CMD_ADDR_VBUSCALIB_K,
	RS485_CMD_ADDR_VBUSCALIB_B,

	//RS485_CMD_ADDR_ICHGCALIB_K = 0x2100,
	RS485_CMD_ADDR_ICHGCALIB_K,		//第二页		//读取
	RS485_CMD_ADDR_ICHGCALIB_B,
	RS485_CMD_ADDR_IDISCHGCALIB_K,
	RS485_CMD_ADDR_IDISCHGCALIB_B,
	RS485_CMD_ADDR_TEMP1_CALIB_K,		//读取
	RS485_CMD_ADDR_TEMP1_CALIB_B,
	RS485_CMD_ADDR_TEMP2_CALIB_K,
	RS485_CMD_ADDR_TEMP2_CALIB_B,
	RS485_CMD_ADDR_TEMP3_CALIB_K,
	RS485_CMD_ADDR_TEMP3_CALIB_B,
	RS485_CMD_ADDR_TEMP4_CALIB_K,
	RS485_CMD_ADDR_TEMP4_CALIB_B,
	RS485_CMD_ADDR_TEMP5_CALIB_K,
	RS485_CMD_ADDR_TEMP5_CALIB_B,
	RS485_CMD_ADDR_TEMP6_CALIB_K,
	RS485_CMD_ADDR_TEMP6_CALIB_B,
	RS485_CMD_ADDR_TEMP_ENV1_CALIB_K,
	RS485_CMD_ADDR_TEMP_ENV1_CALIB_B,
	RS485_CMD_ADDR_TEMP_ENV2_CALIB_K,
	RS485_CMD_ADDR_TEMP_ENV2_CALIB_B,
	RS485_CMD_ADDR_TEMP_ENV3_CALIB_K,
	RS485_CMD_ADDR_TEMP_ENV3_CALIB_B,
	RS485_CMD_ADDR_TEMP_MOS_CALIB_K,
	RS485_CMD_ADDR_TEMP_MOS_CALIB_B,

	RS485_CMD_ADDR_VCELL_OVP_FIRST = 0x2100,
	RS485_CMD_ADDR_VCELL_OVP_SECOND,
	RS485_CMD_ADDR_VCELL_OVP_THIRD,
	RS485_CMD_ADDR_VCELL_OVP_RCV,
	RS485_CMD_ADDR_VCELL_OVP_FILTER,

	RS485_CMD_ADDR_VCELL_UVP_FIRST,
	RS485_CMD_ADDR_VCELL_UVP_SECOND,
	RS485_CMD_ADDR_VCELL_UVP_THIRD,
	RS485_CMD_ADDR_VCELL_UVP_RCV,
	RS485_CMD_ADDR_VCELL_UVP_FILTER,

	RS485_CMD_ADDR_VBUS_OVP_FIRST,
	RS485_CMD_ADDR_VBUS_OVP_SECOND,
	RS485_CMD_ADDR_VBUS_OVP_THIRD,
	RS485_CMD_ADDR_VBUS_OVP_RCV,
	RS485_CMD_ADDR_VBUS_OVP_FILTER,	
	
	RS485_CMD_ADDR_VBUS_UVP_FIRST,
	RS485_CMD_ADDR_VBUS_UVP_SECOND,
	RS485_CMD_ADDR_VBUS_UVP_THIRD,
	RS485_CMD_ADDR_VBUS_UVP_RCV,
	RS485_CMD_ADDR_VBUS_UVP_FILTER,	

	RS485_CMD_ADDR_ICHG_OCP_FIRST,
	RS485_CMD_ADDR_ICHG_OCP_SECOND,
	RS485_CMD_ADDR_ICHG_OCP_THIRD,
	RS485_CMD_ADDR_ICHG_OCP_RCV,
	RS485_CMD_ADDR_ICHG_OCP_FILTER,	

	RS485_CMD_ADDR_IDSG_OCP_FIRST,
	RS485_CMD_ADDR_IDSG_OCP_SECOND,
	RS485_CMD_ADDR_IDSG_OCP_THIRD,
	RS485_CMD_ADDR_IDSG_OCP_RCV,
	RS485_CMD_ADDR_IDSG_OCP_FILTER,	

	RS485_CMD_ADDR_TCHG_OTP_FIRST,
	RS485_CMD_ADDR_TCHG_OTP_SECOND,
	RS485_CMD_ADDR_TCHG_OTP_THIRD,
	RS485_CMD_ADDR_TCHG_OTP_RCV,
	RS485_CMD_ADDR_TCHG_OTP_FILTER,	

	RS485_CMD_ADDR_TCHG_UTP_FIRST,
	RS485_CMD_ADDR_TCHG_UTP_SECOND,
	RS485_CMD_ADDR_TCHG_UTP_THIRD,
	RS485_CMD_ADDR_TCHG_UTP_RCV,
	RS485_CMD_ADDR_TCHG_UTP_FILTER,
	
	RS485_CMD_ADDR_TDSG_OTP_FIRST,
	RS485_CMD_ADDR_TDSG_OTP_SECOND,
	RS485_CMD_ADDR_TDSG_OTP_THIRD,
	RS485_CMD_ADDR_TDSG_OTP_RCV,
	RS485_CMD_ADDR_TDSG_OTP_FILTER, 
	
	RS485_CMD_ADDR_TDSG_UTP_FIRST,
	RS485_CMD_ADDR_TDSG_UTP_SECOND,
	RS485_CMD_ADDR_TDSG_UTP_THIRD,
	RS485_CMD_ADDR_TDSG_UTP_RCV,
	RS485_CMD_ADDR_TDSG_UTP_FILTER, 

	RS485_CMD_ADDR_TMOS_OTP_FIRST,
	RS485_CMD_ADDR_TMOS_OTP_SECOND,
	RS485_CMD_ADDR_TMOS_OTP_THIRD,
	RS485_CMD_ADDR_TMOS_OTP_RCV,
	RS485_CMD_ADDR_TMOS_OTP_FILTER, 

	RS485_CMD_ADDR_VDELTA_OP_FIRST,
	RS485_CMD_ADDR_VDELTA_OP_SECOND,
	RS485_CMD_ADDR_VDELTA_OP_THIRD,
	RS485_CMD_ADDR_VDELTA_OP_RCV,
	RS485_CMD_ADDR_VDELTA_OP_FILTER, 

	RS485_CMD_ADDR_SOC_UP_FIRST,
	RS485_CMD_ADDR_SOC_UP_SECOND,
	RS485_CMD_ADDR_SOC_UP_THIRD,
	RS485_CMD_ADDR_SOC_UP_RCV,
	RS485_CMD_ADDR_SOC_UP_FILTER, 


	RS485_CMD_ADDR_SOC_VOLTAGE1 = 0x2200,
	RS485_CMD_ADDR_SOC_VALUE1,
	RS485_CMD_ADDR_SOC_VOLTAGE2,
	RS485_CMD_ADDR_SOC_VALUE2,
	RS485_CMD_ADDR_SOC_VOLTAGE3,
	RS485_CMD_ADDR_SOC_VALUE3,
	RS485_CMD_ADDR_SOC_VOLTAGE4,
	RS485_CMD_ADDR_SOC_VALUE4,
	RS485_CMD_ADDR_SOC_VOLTAGE5,
	RS485_CMD_ADDR_SOC_VALUE5,
	RS485_CMD_ADDR_SOC_VOLTAGE6,
	RS485_CMD_ADDR_SOC_VALUE6,
	RS485_CMD_ADDR_SOC_VOLTAGE7,
	RS485_CMD_ADDR_SOC_VALUE7,
	RS485_CMD_ADDR_SOC_VOLTAGE8,
	RS485_CMD_ADDR_SOC_VALUE8,
	RS485_CMD_ADDR_SOC_VOLTAGE9,
	RS485_CMD_ADDR_SOC_VALUE9,
	RS485_CMD_ADDR_SOC_VOLTAGE10,
	RS485_CMD_ADDR_SOC_VALUE10,
	RS485_CMD_ADDR_SOC_VOLTAGE11,
	RS485_CMD_ADDR_SOC_VALUE11,
	RS485_CMD_ADDR_SOC_VOLTAGE12,
	RS485_CMD_ADDR_SOC_VALUE12,
	RS485_CMD_ADDR_SOC_VOLTAGE13,
	RS485_CMD_ADDR_SOC_VALUE13,
	RS485_CMD_ADDR_SOC_VOLTAGE14,
	RS485_CMD_ADDR_SOC_VALUE14,
	RS485_CMD_ADDR_SOC_VOLTAGE15,
	RS485_CMD_ADDR_SOC_VALUE15,
	RS485_CMD_ADDR_SOC_VOLTAGE16,
	RS485_CMD_ADDR_SOC_VALUE16,
	RS485_CMD_ADDR_SOC_VOLTAGE17,
	RS485_CMD_ADDR_SOC_VALUE17,
	RS485_CMD_ADDR_SOC_VOLTAGE18,
	RS485_CMD_ADDR_SOC_VALUE18,
	RS485_CMD_ADDR_SOC_VOLTAGE19,
	RS485_CMD_ADDR_SOC_VALUE19,
	RS485_CMD_ADDR_SOC_VOLTAGE20,
	RS485_CMD_ADDR_SOC_VALUE20,
	RS485_CMD_ADDR_SOC_VOLTAGE21,
	RS485_CMD_ADDR_SOC_VALUE21,


	RS485_CMD_ADDR_COPPERLOSS1,		//读取
	RS485_CMD_ADDR_COPPERLOSS2,
	RS485_CMD_ADDR_COPPERLOSS3,
	RS485_CMD_ADDR_COPPERLOSS4,
	RS485_CMD_ADDR_COPPERLOSS5,
	RS485_CMD_ADDR_COPPERLOSS6,
	RS485_CMD_ADDR_COPPERLOSS7,
	RS485_CMD_ADDR_COPPERLOSS8,
	RS485_CMD_ADDR_COPPERLOSS9,
	RS485_CMD_ADDR_COPPERLOSS10,
	RS485_CMD_ADDR_COPPERLOSS11,
	RS485_CMD_ADDR_COPPERLOSS12,
	RS485_CMD_ADDR_COPPERLOSS13,
	RS485_CMD_ADDR_COPPERLOSS14,
	RS485_CMD_ADDR_COPPERLOSS15,
	RS485_CMD_ADDR_COPPERLOSS16,
	RS485_CMD_ADDR_CELLNUM1,
	RS485_CMD_ADDR_CELLNUM2,
	RS485_CMD_ADDR_CELLNUM3,
	RS485_CMD_ADDR_CELLNUM4,
	RS485_CMD_ADDR_CELLNUM5,
	RS485_CMD_ADDR_CELLNUM6,
	RS485_CMD_ADDR_CELLNUM7,
	RS485_CMD_ADDR_CELLNUM8,
	RS485_CMD_ADDR_CELLNUM9,
	RS485_CMD_ADDR_CELLNUM10,
	RS485_CMD_ADDR_CELLNUM11,
	RS485_CMD_ADDR_CELLNUM12,
	RS485_CMD_ADDR_CELLNUM13,
	RS485_CMD_ADDR_CELLNUM14,
	RS485_CMD_ADDR_CELLNUM15,
	RS485_CMD_ADDR_CELLNUM16,

	RS485_CMD_ADDR_RTC_TIME_YEAR,		//读取
	RS485_CMD_ADDR_RTC_TIME_MONTH,
	RS485_CMD_ADDR_RTC_TIME_DAY,
	RS485_CMD_ADDR_RTC_TIME_HOUR,
	RS485_CMD_ADDR_RTC_TIME_MINUTE,
	RS485_CMD_ADDR_RTC_TIME_SECOND,
	RS485_CMD_ADDR_RTC_ALARM_YEAR,
	RS485_CMD_ADDR_RTC_ALARM_MONTH,
	RS485_CMD_ADDR_RTC_ALARM_DAY,	
	RS485_CMD_ADDR_RTC_ALARM_HOUR,
	RS485_CMD_ADDR_RTC_ALARM_MINUTE,
	RS485_CMD_ADDR_RTC_ALARM_SECOND,

	RS485_CMD_ADDR_BALANCE_OV = 0x2300,		//读取
	RS485_CMD_ADDR_BALANCE_OW,
	RS485_CMD_ADDR_BALANCE_CW1,	
	RS485_CMD_ADDR_BALANCE_CW2,
	RS485_CMD_ADDR_OPENTIME_ODD,
	RS485_CMD_ADDR_OPENTIME_EVEN,
	RS485_CMD_ADDR_OPENTIME_MOS, 
	RS485_CMD_ADDR_OPENTIME_RES,
	
	RS485_CMD_ADDR_CS_CUR_CHGMAX,
	RS485_CMD_ADDR_CS_CUR_DSGMAX,
	RS485_CMD_ADDR_CBC_CUR_CHG,
	RS485_CMD_ADDR_CBC_CUR_DSG,
	RS485_CMD_ADDR_COOL_DSG_H,
	RS485_CMD_ADDR_COOL_DSG_L,
	RS485_CMD_ADDR_COOL_CHG_H,
	RS485_CMD_ADDR_COOL_CHG_L,

	RS485_CMD_ADDR_SLEEP_V_NORMAL,
	RS485_CMD_ADDR_SLEEP_TIME_NORMAL,	   
	RS485_CMD_ADDR_SLEEP_V_LOW,
	RS485_CMD_ADDR_SLEEP_TIME_LOW,
	RS485_CMD_ADDR_SLEEP_I_CHG,
	RS485_CMD_ADDR_SLEEP_I_DSG,	   
	RS485_CMD_ADDR_SLEEP_RES1,
	RS485_CMD_ADDR_SLEEP_RES2,

	RS485_CMD_ADDR_SOC_AH,
	RS485_CMD_ADDR_SOC_CYCLE_TIME,
	RS485_CMD_ADDR_SOC_RES1,
	RS485_CMD_ADDR_SOC_RES2,

	RS485_CMD_ADDR_SYS_SERIES_NUM,
	RS485_CMD_ADDR_SYS_CS_RESIS,
	RS485_CMD_ADDR_SYS_CS_NUM,
	RS485_CMD_ADDR_SYS_RES1,

	RS485_CMD_ADDR_HEAT_DSG_HIGH,
	RS485_CMD_ADDR_HEAT_DSG_LOW,
	RS485_CMD_ADDR_HEAT_CHG_HIGH,
	RS485_CMD_ADDR_HEAT_CHG_LOW,
	RS485_CMD_ADDR_HEAT_CUR_MAX,
	RS485_CMD_ADDR_HEAT_CUR_MIN,
	RS485_CMD_ADDR_HEAT_TIME_MAX,
	RS485_CMD_ADDR_HEAT_RES1,
	RS485_CMD_ADDR_HEAT_RES2,
	RS485_CMD_ADDR_HEAT_RES3,
	RS485_CMD_ADDR_HEAT_RES4,
	RS485_CMD_ADDR_HEAT_RES5,
	RS485_CMD_ADDR_HEAT_RES6,
	
	RS485_CMD_ADDR_COOL_DSG_HIGH,
	RS485_CMD_ADDR_COOL_DSG_LOW,
	RS485_CMD_ADDR_COOL_CHG_HIGH,
	RS485_CMD_ADDR_COOL_CHG_LOW,
	RS485_CMD_ADDR_COOL_CUR_MAX,	   
	RS485_CMD_ADDR_COOL_CUR_MIN,
	RS485_CMD_ADDR_COOL_TIME_MAX,
	RS485_CMD_ADDR_COOL_RES1,
	RS485_CMD_ADDR_COOL_RES2,	   
	RS485_CMD_ADDR_COOL_RES3,
	RS485_CMD_ADDR_COOL_RES4,
};


extern UINT8 u8FlashUpdateFlag;
extern UINT8 u8FlashUpdateE2PROM;
extern UINT8 gu8_TxEnable_SCI1;
extern UINT8 gu8_TxEnable_SCI2;
extern UINT8 gu8_TxEnable_SCI3;

extern struct RS485MSG g_stCurrentMsgPtr_SCI1;
extern struct RS485MSG g_stCurrentMsgPtr_SCI2;
extern struct RS485MSG g_stCurrentMsgPtr_SCI3;

extern struct stCell_Info g_stCellInfoReport;


void Sci1_CommonUpper_FaultChk(void);
void Sci1_CommonUpper_Rx_Deal(struct RS485MSG *s);
void Sci2_CommonUpper_FaultChk(void);
void Sci2_CommonUpper_Rx_Deal(struct RS485MSG *s);
void Sci3_CommonUpper_FaultChk(void);
void Sci3_CommonUpper_Rx_Deal(struct RS485MSG *s);

void InitUSART_CommonUpper(void);
void App_CommonUpper(void);

#endif	/* SCI_H */

